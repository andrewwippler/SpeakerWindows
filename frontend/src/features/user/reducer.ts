import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../store'

export interface UserState {
  apitoken: string
  loginStatus: 'in' | 'out' | 'failed'
}

const initialState: UserState = {
  apitoken: '',
  loginStatus: 'out',
}

interface LoginMap {
  email: string,
  password: string,
};

async function fetchToken(credentials: LoginMap): Promise<{ data: string }> {
  const response = await fetch(`${process.env.NEXT_PUBLIC_HOST_URL}/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ email: credentials.email, password: credentials.password }),
  })
  const result = await response.json()

  return result.token
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const loginAsync = createAsyncThunk(
  'user/fetchToken',
  async (credentials: LoginMap) => {
    const response = await fetchToken(credentials)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const userReducer = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    checkLoginStatus: (state) => {
      state.loginStatus
    },
    getToken: (state) => {
      state.apitoken
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.loginStatus = 'out'
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.loginStatus = 'in'
        state.apitoken += action.payload
      })
  },
})

export const selectLoginStatus = (state: AppState) => state.user.loginStatus
export const selectToken = (state: AppState) => state.user.apitoken

export const { checkLoginStatus, getToken } = userReducer.actions

export default userReducer.reducer
